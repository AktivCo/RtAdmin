<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ActivationPasswordsWereGenerated" xml:space="preserve">
    <value>Generate activation passwords passed</value>
  </data>
  <data name="AdminPinChangeError" xml:space="preserve">
    <value>Admin PIN change failed. Enter admin PIN</value>
  </data>
  <data name="AdminPinOption" xml:space="preserve">
    <value>Set Admin PIN code. Must be specified for Admin PIN changing. If not specified, the default value is used</value>
  </data>
  <data name="ChangeAdminPinOldPinError" xml:space="preserve">
    <value>For changing admin PIN enter old admin PIN</value>
  </data>
  <data name="ChangeTokenLabelPinError" xml:space="preserve">
    <value>Can't change token label. Enter user PIN using -c</value>
  </data>
  <data name="ChangeUserPinOldPinsError" xml:space="preserve">
    <value>For changing user PIN enter old user or admin PIN</value>
  </data>
  <data name="ChangeVolumeAttributesOption" xml:space="preserve">
    <value>Change volume attributes. Id : volume id {1 - 9}, aR : access rights{ro, rw, hi, cd}, cT : change type { p - permanent, t - temporary }</value>
  </data>
  <data name="ConfigurationFilePathOption" xml:space="preserve">
    <value>Configuration file path</value>
  </data>
  <data name="FormatTokenOption" xml:space="preserve">
    <value>Format memory. If your device has built-in Flash memory you may specify Admin PIN, otherwise you may lose all data on it</value>
  </data>
  <data name="FormatTokenSuccess" xml:space="preserve">
    <value>Formatting was successful</value>
  </data>
  <data name="FormatVolumeParamsOption" xml:space="preserve">
    <value>Format volume. Id : volume id {1 - 9}, size : volume size in MB, owner : volume owner {a - administrator, u - user}, aR : access rights {ro, rw, hi, cd}. One command for one volume. To create multiple partitions, use the appropriate number of -F commands in sequence"</value>
  </data>
  <data name="GenerateRandomAdminPinOption" xml:space="preserve">
    <value>Generate random Admin PIN code of specified length. If this command is used -a is ignored</value>
  </data>
  <data name="GenerateRandomUserPinOption" xml:space="preserve">
    <value>Generate random User PIN code of specified length. If this command is used -u is ignored</value>
  </data>
  <data name="GeneratingActivationPasswords" xml:space="preserve">
    <value>Generating activation password(s)</value>
  </data>
  <data name="IncorrectAdminPin" xml:space="preserve">
    <value>Entered Admin PIN is incorrect</value>
  </data>
  <data name="IncorrectPin" xml:space="preserve">
    <value>Entered PIN is incorrect</value>
  </data>
  <data name="IncorrectPinCodesCount" xml:space="preserve">
    <value>The file contains incorrect number of PINs</value>
  </data>
  <data name="InitializedInfo" xml:space="preserve">
    <value>Application was initialized</value>
  </data>
  <data name="LogFilePathOption" xml:space="preserve">
    <value>Log file path</value>
  </data>
  <data name="LoginWithLocalPinOption" xml:space="preserve">
    <value>PIN Login with local PIN. Id : local PIN id {1 - 9}, PIN : local PIN. In order to use local user set his new PIN preliminarily</value>
  </data>
  <data name="MaxAdminPinAttemptsOption" xml:space="preserve">
    <value>Max PIN code attempts count for Admin PIN (count must be in the range from 3 to 10; default: 6)</value>
  </data>
  <data name="MaxUserPinAttemptsOption" xml:space="preserve">
    <value>Max PIN code attempts count for User PIN (count must be in the range from 3 to 10; default: 6)</value>
  </data>
  <data name="MinAdminPinLengthOption" xml:space="preserve">
    <value>Min Admin PIN code length (len must be in the range from 1 to 31; default: 6). Ignore for Rutoken S(use 1 only)</value>
  </data>
  <data name="MinUserPinLengthOption" xml:space="preserve">
    <value>Min User PIN code length (len must be in the range from 1 to 31; default: 6). Ignore for Rutoken S(use 1 only)</value>
  </data>
  <data name="NativeLibraryPathOption" xml:space="preserve">
    <value>Specify a native library to use</value>
  </data>
  <data name="OldAdminPinOption" xml:space="preserve">
    <value>Old Admin PIN code. Must be specified for Admin PIN changing</value>
  </data>
  <data name="OldUserPinOption" xml:space="preserve">
    <value>Old User PIN code. Must be specified for User PIN changing</value>
  </data>
  <data name="OneIterationOnlyOption" xml:space="preserve">
    <value>Stop after one iteration</value>
  </data>
  <data name="PinChangedSuccess" xml:space="preserve">
    <value>PIN changed successfully</value>
  </data>
  <data name="PinChangePolicyOption" xml:space="preserve">
    <value>PIN change policy N : { 1 - administrator (SO) can change user PIN | 2 - user can change user PIN | 3 - both } (default: 2)</value>
  </data>
  <data name="PinCodesFileNotFound" xml:space="preserve">
    <value>PIN-code file not found</value>
  </data>
  <data name="PinFilePathOption" xml:space="preserve">
    <value>Load new PIN codes from specified file. Use ont PIN per line, \n is separator. -a -u -G -g commands are ignored</value>
  </data>
  <data name="PinLengthMismatch" xml:space="preserve">
    <value>PIN length and allowed PIN length mismatch. Min admin PIN length: {0}, max admin PIN length: {1}, min user PIN length: {2}, max user PIN length: {3}</value>
  </data>
  <data name="PinsEnded" xml:space="preserve">
    <value>PIN-codes from file ended</value>
  </data>
  <data name="RandomAdminPinLengthMismatch" xml:space="preserve">
    <value>New random Admin PIN length and allowed PIN length mismatch, min PIN length: {0}, max PIN length: {1}</value>
  </data>
  <data name="RandomUserPinLengthMismatch" xml:space="preserve">
    <value>New random User PIN length and allowed PIN length mismatch, min PIN length: {0}, max PIN length: {1}</value>
  </data>
  <data name="SetLocalPinOption" xml:space="preserve">
    <value>PIN Set local PIN. Id : local PIN id {1 - 9}, PIN : local PIN. You should use login with local PIN command to set local user PIN</value>
  </data>
  <data name="SetPin2ModeOption" xml:space="preserve">
    <value>Activate setting PIN2 code (on the screen) mode. Must be specified for PIN2 changing. If not specified, the default value is used</value>
  </data>
  <data name="SmModeOption" xml:space="preserve">
    <value>Set SM mode (only for Bluetooth token).  "N : " { 1 - Optional password | 2 - 1 password | 3 - 6 passwords }, mode { caps - only capital letters | digits - capital letters and digits }</value>
  </data>
  <data name="TokenLabelChangeSuccess" xml:space="preserve">
    <value>Token label changed successfully</value>
  </data>
  <data name="TokenLabelCp1251Option" xml:space="preserve">
    <value>Use cp1251 for new device label</value>
  </data>
  <data name="TokenLabelUtf8Option" xml:space="preserve">
    <value>Use UTF-8 for new device label</value>
  </data>
  <data name="UnblockPinsOption" xml:space="preserve">
    <value>Unblock user and local PINs. You should use login with Admin PIN command to unblock user and local PINs</value>
  </data>
  <data name="UserPinChangeAdminPinError" xml:space="preserve">
    <value>User PIN change failed. Enter admin pin according to user PIN change policy on token</value>
  </data>
  <data name="UserPinChangeError" xml:space="preserve">
    <value>User PIN change failed. Enter user PIN or admin PIN according to user PIN change policy on token</value>
  </data>
  <data name="UserPinChangeUserPinError" xml:space="preserve">
    <value>User PIN change failed. Enter user pin according to user PIN change policy on token</value>
  </data>
  <data name="UserPinOption" xml:space="preserve">
    <value>Set User PIN code. Must be specified for Admin PIN changing. If not specified, the default value is used</value>
  </data>
  <data name="Utf8Option" xml:space="preserve">
    <value>Use UTF-8 instead of cp1251 in PIN codes</value>
  </data>
  <data name="VolumeInfoParamsOption" xml:space="preserve">
    <value>Get volume info. Id : volume id {1 - 9, a - all, sz - get flash size}</value>
  </data>
  <data name="LocalPinSetSuccess" xml:space="preserve">
    <value>Local PIN has been successfully set</value>
  </data>
  <data name="Pin2SetSuccess" xml:space="preserve">
    <value>PIN2 PINPad set request has been successfully sent</value>
  </data>
  <data name="PinUnlockSuccess" xml:space="preserve">
    <value>Unblock PIN passed</value>
  </data>
  <data name="WaitingNextToken" xml:space="preserve">
    <value>Next token... (Or press Ctrl+C)</value>
  </data>
  <data name="FormatError" xml:space="preserve">
    <value>Formatting error</value>
  </data>
  <data name="FormatFailed" xml:space="preserve">
    <value>Format failed : {0} : {1} : SM mode = {2}</value>
  </data>
  <data name="FormatPassed" xml:space="preserve">
    <value>Format passed : {0} : {1} : SM mode = {2}</value>
  </data>
  <data name="PKCS11Error" xml:space="preserve">
    <value>Internal error: PKCS#11 library code:</value>
  </data>
  <data name="TokenId" xml:space="preserve">
    <value>Token Id</value>
  </data>
  <data name="TokenParamsNotSet" xml:space="preserve">
    <value>Token params were not set</value>
  </data>
  <data name="UnhandledError" xml:space="preserve">
    <value>Unhandled error:</value>
  </data>
</root>